ðŸ“Œ Project Idea: Blog/Articles API

This is realistic and covers most real-world needs:

Users can sign up / login

Users can create posts

Users can comment on posts

Optional: Roles (admin, user) â†’ restrict actions

1. Users Table

Stores registered users.
Weâ€™ll use UUID for id and store hashed password.

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password VARCHAR(200) NOT NULL,
    role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'admin')),
    verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

2. Posts Table

Each post belongs to a user (foreign key).

CREATE TABLE IF NOT EXISTS posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

3. Comments Table

Each comment belongs to a post and a user.

CREATE TABLE IF NOT EXISTS comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

4. Password Reset Tokens (optional but ðŸ”‘ for forgot/reset password)

When a user requests password reset â†’ store token here.

CREATE TABLE IF NOT EXISTS password_resets (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token VARCHAR(200) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


âœ… Now you have:

users â†’ authentication + roles

posts â†’ content created by users

comments â†’ interactions between users and posts

password_resets â†’ security feature

âš¡ Example Query Workflows

Signup â†’ Insert into users

Login â†’ Select email, compare password

Create Post â†’ Insert into posts with user_id

Get All Posts â†’ Join with users (to show author name)

Add Comment â†’ Insert into comments with user_id & post_id

Forgot Password â†’ Insert token into password_resets

ðŸ‘‰ This schema is scalable and lets you practice:

Foreign keys âœ…

Cascade delete (if user is deleted, posts/comments go too) âœ…

Roles & permissions âœ…

Auth workflows âœ…

Pagination/sorting/filtering (easy on posts & comments) âœ…